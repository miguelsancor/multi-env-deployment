apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-app
  namespace: dev
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-volume
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      volumes:
      - name: html-volume
        configMap:
          name: dev-html
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-html
  namespace: dev
data:
  index.html: |
    <html>
      <head>
        <title>Ambiente Dev</title>
      </head>
      <body>
        <h1>Bienvenido al Ambiente Dev</h1>
        <p>Este pod est√° sirviendo la solicitud:</p>
        <pre id="pod-name">Cargando...</pre>
        <script>
          fetch('/pod-info')
            .then(response => response.json())
            .then(data => {
              document.getElementById('pod-name').textContent = data.pod_name;
            });
        </script>
      </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: dev
data:
  default.conf: |
    server {
        listen 80;
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        location /pod-info {
            default_type application/json;
            return 200 '{"pod_name":"$hostname"}';
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: dev
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80          # Puerto interno del servicio
    targetPort: 80     # Puerto del contenedor
    nodePort: 30008    # Puerto expuesto en el nodo
